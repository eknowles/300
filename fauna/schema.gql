#directive @embedded on OBJECT
#directive @collection(name: String!) on OBJECT
#directive @index(name: String!) on FIELD_DEFINITION
#directive @resolver(name: String, paginated: Boolean! = false) on FIELD_DEFINITION
#directive @relation(name: String) on FIELD_DEFINITION
#directive @unique(index: String) on FIELD_DEFINITION

type Query {
  totalProfiles: Int! @resolver(name: "count_total_profiles")
  totalCommunities: Int! @resolver(name: "count_total_communities")
  allProfiles: [Profile!] @index(name: "all_profiles")
  allCommunities: [Community!] @index(name: "all_communities")
}

# Account account represents an external service used to authenticate
type Account @collection(name: "accounts") {
  email: String! @unique(index: "account_by_email")
  profile: Profile! @relation(name: "account_profile")
  discordId: ID! @unique(index: "account_by_discordid")
  discordToken: DiscordToken!
}

type DiscordToken @embedded {
  access_token: String!
  refresh_token: String!
  token_type: String!
  scope: String!

  # custom
  expires_in: Int!
}

# A user is a single profile
type Profile @collection(name: "profiles") {
  username: String!
  avatarUrl: String
  localeCode: String
  countryCode: String
  memberships: [Membership!] @relation(name: "profile_memberships")
}

type Community @collection(name: "communities") {
  discordGuildId: ID! @unique(index: "community_by_discordid")
  name: String!
  tag: String
  region: String! # EU, NA, OC
  countryCode: String
  localeCode: String
  iconUrl: String
  memberships: [Membership!] @relation(name: "membership_community")
}

type Membership @collection(name: "memberships") {
  profile: Profile! @relation(name: "profile_memberships")
  community: Community! @relation(name: "membership_community")
  level: String! # owner, board, director, leader, member, rookie
}
