#directive @embedded on OBJECT
#directive @collection(name: String!) on OBJECT
#directive @index(name: String!) on FIELD_DEFINITION
#directive @resolver(name: String, paginated: Boolean! = false) on FIELD_DEFINITION
#directive @relation(name: String) on FIELD_DEFINITION
#directive @unique(index: String) on FIELD_DEFINITION

type Query {
  myProfile: UserProfile! @resolver(name: "my_profile")
  totalUserProfiles: Int! @resolver(name: "count_total_user_profiles")
  totalCommunityProfiles: Int! @resolver(name: "count_total_community_profiles")
  allUserProfiles: [UserProfile!] @index(name: "all_user_profiles")
  allCommunityProfiles: [CommunityProfile!] @index(name: "all_community_profiles")
  permissionCanUpdateCommunity(id: ID!): Boolean! @resolver(name: "permission_can_update_community")
}

type Mutation {
  joinCommunity(communityProfileID: ID!): Membership @resolver(name: "join_community_mutation")
}

enum MembershipRole {
  OWNER
  BOARD
  DIRECTOR
  LEADER
  MEMBER
  ROOKIE
}

# Account account represents an external service used to authenticate
type UserAccount @collection(name: "user_accounts") {
  email: String! @unique(index: "user_account_by_email")
  userProfile: UserProfile! @relation(name: "user_account_profile")
  discordId: ID! @unique(index: "user_account_by_discordid")
  discordToken: DiscordToken!
  stripeCustomerId: ID!
}

type CommunityAccount @collection(name: "community_accounts") {
  discordId: ID! @unique(index: "community_account_by_discordid")
  discordToken: DiscordBotToken!
  stripeAccountToken: StripeAccountToken
  stripeAccountId: String
  ownerAccount: UserAccount!
  communityProfile: CommunityProfile! @relation(name: "community_account_profile")
}

type StripeAccountToken @collection(name: "stripe_account_tokens") {
  access_token: String!
  refresh_token: String!
  token_type: String!
  scope: String!
  stripe_publishable_key: String!
  stripe_user_id: String!
  livemode: Boolean
}

type DiscordToken @collection(name: "discord_user_tokens") {
  access_token: String!
  refresh_token: String!
  token_type: String!
  scope: String!
  expires_in: Int!
}

type DiscordBotToken @collection(name: "discord_bot_tokens") {
  access_token: String!
  refresh_token: String!
  token_type: String!
  scope: String!
  expires_in: Int!
}

type Membership @collection(name: "memberships") {
  userProfile: UserProfile! @relation(name: "user_profile_memberships")
  communityProfile: CommunityProfile! @relation(name: "community_profile_membership")
  role: MembershipRole! # owner, board, director, leader, member, rookie
  customerId: String
  subscriptionId: String
  isPremium: Boolean
  createdAt: Time!
}

type UserProfile @collection(name: "user_profiles") {
  username: String!
  avatarUrl: String
  localeCode: String
  countryCode: String
  memberships: [Membership!] @relation(name: "user_profile_memberships")
  userAccount: UserAccount!
}

type CommunityProfile @collection(name: "community_profiles") {
  name: String!
  shortName: String! @unique
  region: String! # EU, NA, OC
  aboutText: String
  premiumText: String
  countryCode: String
  localeCode: String
  iconUrl: String
  bannerUrl: String
  splashUrl: String
  communityAccount: CommunityAccount! @relation(name: "community_account_profile")
  memberships: [Membership!] @relation(name: "community_profile_membership")
}
